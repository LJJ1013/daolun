#define SSID        "HA" //改为你的热点名称, 不要有中文
#define PASSWORD    "5a28a4da9911"//改为你的WiFi密码Wi-Fi密码
#define DEVICEID    "577972912" //OneNet上的设备ID
String apiKey = "SCtPXHLtTOegm8irvJyd8JMzL88=  ";//与你的设备绑定的APIKey

#include <Wire.h>                                  //调用库  
#include <ESP8266.h>
#include <I2Cdev.h>                                //调用库  
#include <Microduino_Audio.h>
#include <Microduino_Key.h>
#include <U8glib.h>
const unsigned char PROGMEM shi[] = {
/*--  调入了一幅图像：C:\Users\86186\Desktop\妈呀.bmp  --*/
/*--  宽度x高度=128x66  --*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x84,0x04,0x20,0x21,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x0F,0xDF,0x7E,0xFB,0xF7,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x02,0xF1,0x17,0x88,0xBC,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x02,0x95,0x14,0xA8,0xA5,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x0F,0xF1,0x7F,0x8B,0xFC,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x06,0x00,0x00,0x02,0x97,0x14,0xB8,0xA5,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,
0x03,0xC7,0xC0,0x00,0x02,0xF0,0x17,0x80,0xBC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x02,0xDF,0x00,0x00,0x07,0xDF,0xBE,0xFD,0xF7,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,
0x02,0xC3,0x20,0x00,0x0E,0xC1,0xF6,0x0F,0xB0,0x60,0x00,0x00,0x00,0x00,0x00,0x00,
0x02,0xC3,0x70,0x00,0x02,0x9F,0x94,0xFC,0xA7,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,
0x02,0xFF,0xE0,0x00,0x03,0xE1,0x1F,0x08,0xF8,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
0x02,0xCF,0xC0,0x00,0x07,0xE1,0x3F,0x09,0xF8,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
0x02,0xCF,0x80,0x00,0x04,0x67,0x23,0x39,0x19,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,
0x02,0xDB,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x02,0xDB,0xC0,0x00,0x01,0xB0,0x00,0x00,0x30,0x1F,0xFC,0x01,0x00,0x00,0x00,0x00,
0x03,0xF3,0x60,0x00,0x01,0xB0,0xFF,0xF8,0x30,0x00,0x81,0xFF,0x00,0x00,0x00,0x00,
0x02,0x73,0x70,0x00,0x0F,0xFE,0x21,0x83,0xFF,0x80,0x80,0x0D,0xF0,0x00,0x00,0x00,
0x02,0x63,0x20,0x00,0x09,0xB2,0x21,0x83,0x01,0x80,0x80,0xEE,0x30,0x00,0x00,0x00,
0x00,0x0E,0x00,0x00,0x09,0xB2,0x27,0xF3,0x01,0x81,0x80,0xAE,0x20,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x09,0xB2,0x24,0x13,0x7D,0xBF,0xFF,0xFE,0x80,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x0F,0xFE,0x24,0x93,0x45,0x81,0xC0,0x0C,0x80,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x09,0xB2,0x24,0x93,0x45,0x83,0x40,0xEC,0x80,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x09,0xB2,0x24,0x93,0x7D,0x82,0x60,0xAD,0xC0,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x09,0xB2,0x3D,0xD3,0x41,0x86,0x30,0xAD,0x40,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x0F,0xFE,0xE1,0xE3,0x01,0x8C,0x18,0xEF,0x20,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x08,0x02,0x02,0x33,0x0F,0x30,0x0E,0x9E,0x10,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x60,0x00,0xF9,0x01,0xC6,0x00,0x02,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x60,0x3F,0x81,0xBF,0xC4,0xFE,0x02,0x00,0x00,0x00,0x00,
0x00,0x61,0x80,0x00,0x07,0xFF,0x03,0x00,0x84,0xCC,0x04,0x03,0x10,0x00,0x00,0x00,
0x03,0xF7,0xE0,0x00,0x06,0x03,0x03,0x79,0x34,0xCB,0xFC,0x7B,0x70,0x00,0x00,0x00,
0x01,0x7E,0x20,0x00,0x06,0x03,0x3F,0xC1,0x96,0x9F,0x04,0x1B,0xE0,0x00,0x00,0x00,
0x01,0x67,0xA0,0x00,0x06,0x03,0x03,0x00,0x81,0x87,0xFF,0x1B,0x80,0x00,0x00,0x00,
0x07,0xF6,0x20,0x00,0x07,0xFF,0x03,0x00,0x3F,0x8C,0x92,0x33,0xC0,0x00,0x00,0x00,
0x01,0x66,0xE0,0x00,0x06,0x03,0x03,0xFD,0x83,0x0E,0x5E,0x32,0x60,0x00,0x00,0x00,
0x01,0x7E,0x00,0x00,0x06,0x03,0x7F,0x09,0xFF,0xE8,0xFC,0x62,0x70,0x00,0x00,0x00,
0x01,0xFF,0xF0,0x00,0x06,0x03,0x03,0x0D,0x86,0x03,0xF4,0xC2,0x38,0x00,0x00,0x00,
0x07,0xF0,0x30,0x00,0x07,0xFF,0x03,0x09,0x06,0x0E,0x13,0x02,0x10,0x00,0x00,0x00,
0x03,0x30,0x20,0x00,0x06,0x03,0x01,0xFB,0x1E,0x18,0x70,0x1E,0x00,0x00,0x00,0x00,
0x01,0x27,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x01,0x78,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x00,
0x01,0xF8,0x20,0x00,0x01,0x80,0x04,0x98,0x43,0x44,0xFF,0x20,0x40,0x00,0x00,0x00,
0x03,0x19,0xE0,0x00,0x01,0xBF,0x9F,0xFC,0x4B,0x62,0x18,0x37,0xF8,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x03,0x46,0x1C,0x1C,0x4B,0x20,0xFF,0x1E,0x48,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x02,0xC6,0x07,0xF1,0xFF,0xF0,0x18,0x26,0x48,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x07,0xC6,0x00,0x00,0x42,0x05,0xFF,0xB6,0x40,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x01,0x86,0x1F,0xFC,0x46,0x06,0x00,0x17,0xF8,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x01,0x06,0x00,0xC0,0x77,0xE0,0xFF,0x06,0x98,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x03,0xC6,0x1F,0xFD,0xCE,0x22,0xC3,0x17,0xB0,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x02,0x06,0x00,0xC0,0x4F,0x46,0xFF,0x36,0xF0,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x06,0x1F,0xFE,0x59,0xC6,0xC3,0x34,0xE0,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x01,0xC6,0x00,0xC0,0x73,0xC4,0xFF,0x3F,0xF0,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x06,0x3F,0xC3,0x81,0xCE,0x34,0xC3,0x25,0x0C,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00


};

#define INTERVAL_LCD             10             //定义OLED刷新时间间隔  
unsigned long lcd_time = millis();                 //OLED刷新时间计时器
U8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_NONE);     //设置OLED型号  

/***/
#define HOST_NAME   "api.heclouds.com"
#define HOST_PORT   (80)
#define INTERVAL_SENSOR   5000             //定义传感器采样时间间隔  597000
#define INTERVAL_NET      5000             //定义发送时间
//传感器部分================================   

/*******温湿度*******/
#include <Microduino_SHT2x.h>
/*******光照*******/
#define  sensorPin_1  A0
#define IDLE_TIMEOUT_MS  3000      // Amount of time to wait (in milliseconds) with no data 
                                   // received before closing the connection.  If you know the server
                                   // you're accessing is quick to respond, you can reduce this value.

//WEBSITE     
char buf[10];

#define INTERVAL_sensor 2000
unsigned long sensorlastTime = millis();

float tempOLED, humiOLED, lightnessOLED;

#define INTERVAL_OLED 1000

String mCottenData;
String jsonToSend;

//3,传感器值的设置 
float sensor_tem, sensor_hum, sensor_lux;                    //传感器温度、湿度、光照   
char  sensor_tem_c[7], sensor_hum_c[7], sensor_lux_c[7] ;    //换成char数组传输
#include <SoftwareSerial.h>
#define EspSerial mySerial
#define UARTSPEED  9600
SoftwareSerial mySerial(2, 3); /* RX:D3, TX:D2 */
ESP8266 wifi(&EspSerial);
//ESP8266 wifi(Serial1);                                      //定义一个ESP8266（wifi）的对象
unsigned long net_time1 = millis();                          //数据上传服务器时间
unsigned long sensor_time = millis();                        //传感器采样时间计时器

//int SensorData;                                   //用于存储传感器数据
String postString;                                //用于存储发送数据的字符串
//String jsonToSend;                                //用于存储发送的json格式参数

Tem_Hum_S2 TempMonitor;
AnalogKey keyA6[3] {(A6), (A6), (A6)};

//Core UART Port: [SoftSerial] [D2,D3]
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328__) || defined (__AVR_ATmega328P__) || defined(__AVR_ATmega32U4__)
#include <SoftwareSerial.h>
SoftwareSerial AudioSerial(2, 3); /* RX:D2, TX:D3 */
Audio audio(&AudioSerial);
#endif

//Core+ UART Port: [Serial1] [D2,D3]
#if defined(__AVR_ATmega1284P__) || defined (__AVR_ATmega644P__) || defined(__AVR_ATmega128RFA1__)
#define AudioSerial Serial1
Audio audio(&AudioSerial);
#endif

//CoreESP UART Port: [RX,TX]
#if defined(ESP32)
HardwareSerial AudioSerial(1);
Audio audio(&AudioSerial, D2, D3);
#endif

uint8_t musicVol = 20;             //初始音量20
uint8_t musicMode = MODE_ALL;      //初始播放模式--全部循环
boolean music_status = false;      //歌曲播放状态
uint16_t fileNum = 0;               //查询当前播放歌曲编号
uint16_t fileNumCache = 0;          //播放歌曲编号缓存
uint16_t totalNum = 0;              //歌曲总数量
uint16_t totalTime = 0;             //当前播放歌曲总时间
uint16_t playTime = 0;              //当前播放歌曲播放时间

uint32_t time1 = 0;

String nameCache = "";
int a=10;
int b=0;
int c=0;
int d=0;
int e=0;
int g=0;
int f=0;
int i=0;

void setup(void)     //初始化函数  
{       
  //初始化串口波特率  
    Wire.begin();
    Serial.begin(9600);
    while (!Serial); // wait for Leonardo enumeration, others continue immediately
    Serial.print(F("setup begin\r\n"));
    delay(100);
    pinMode(sensorPin_1, INPUT);
  Serial.println("Hello");   //短按

  keyA6[0].begin();
  keyA6[1].begin();
  keyA6[2].begin();

  Serial.println("init Audio");   //短按
  audio.begin(DEVICE_TF, musicMode, musicVol);   //播放控制类初始化，设置播放设备为TF卡

  delay(1000);
  totalNum = audio.queryTF();         //读取TF卡总文件数量
  audio.chooseMusic(1);                  //默认从第一首曲目开始
  audio.pauseMusic();                    //暂停
  Serial.println("Done");   //短按

  WifiInit(EspSerial, UARTSPEED);

  Serial.print(F("FW Version:"));
  Serial.println(wifi.getVersion().c_str());

  if (wifi.setOprToStationSoftAP()) {
    Serial.print(F("to station + softap ok\r\n"));
  } else {
    Serial.print(F("to station + softap err\r\n"));
  }

  if (wifi.joinAP(SSID, PASSWORD)) {
    Serial.print(F("Join AP success\r\n"));

    Serial.print(F("IP:"));
    Serial.println( wifi.getLocalIP().c_str());
  } else {
    Serial.print(F("Join AP failure\r\n"));
  }

  if (wifi.disableMUX()) {
    Serial.print(F("single ok\r\n"));
  } else {
    Serial.print(F("single err\r\n"));
  }

  Serial.print(F("setup end\r\n"));
    
  
}
void loop(void)     //循环函数  
{   
  u8g.firstPage();
  do {
   a=a-1;
   u8g.drawBitmapP(a, b, 16, 64, shi);
   
   
   
  }while (u8g.nextPage());

 
  
  if (sensor_time > millis())  sensor_time = millis();  
    
  if(millis() - sensor_time > INTERVAL_SENSOR)              //传感器采样时间间隔  
  {  
    getSensorData();                                        //读串口中的传感器数据
    sensor_time = millis();
  }  

    
  if (net_time1 > millis())  net_time1 = millis();
  
  if (millis() - net_time1 > INTERVAL_NET)                  //发送数据时间间隔
  {                
    updateSensorData();                                     //将数据上传到服务器的函数
    net_time1 = millis();
  }
   
}

void getSensorData(){  
    sensor_tem = TempMonitor.getTemperature();  
    sensor_hum = TempMonitor.getHumidity();   
    //获取光照
    sensor_lux = analogRead(A0);    
    delay(1000);
    dtostrf(sensor_tem, 2, 1, sensor_tem_c);
    dtostrf(sensor_hum, 2, 1, sensor_hum_c);
    dtostrf(sensor_lux, 3, 1, sensor_lux_c);
}
void updateSensorData() {
  if (wifi.createTCP(HOST_NAME, HOST_PORT)) { //建立TCP连接，如果失败，不能发送该数据
    Serial.print("create tcp ok\r\n");

jsonToSend="{\"Temperature\":";
    dtostrf(sensor_tem,1,2,buf);
    jsonToSend+="\""+String(buf)+"\"";
    jsonToSend+=",\"Humidity\":";
    dtostrf(sensor_hum,1,2,buf);
    jsonToSend+="\""+String(buf)+"\"";
    jsonToSend+=",\"Light\":";
    dtostrf(sensor_lux,1,2,buf);
    jsonToSend+="\""+String(buf)+"\"";
    jsonToSend+="}";



    postString="POST /devices/";
    postString+=DEVICEID;
    postString+="/datapoints?type=3 HTTP/1.1";
    postString+="\r\n";
    postString+="api-key:";
    postString+=apiKey;
    postString+="\r\n";
    postString+="Host:api.heclouds.com\r\n";
    postString+="Connection:close\r\n";
    postString+="Content-Length:";
    postString+=jsonToSend.length();
    postString+="\r\n";
    postString+="\r\n";
    postString+=jsonToSend;
    postString+="\r\n";
    postString+="\r\n";
    postString+="\r\n";

  const char *postArray = postString.c_str();                 //将str转化为char数组
  Serial.println(postArray);
  wifi.send((const uint8_t*)postArray, strlen(postArray));    //send发送命令，参数必须是这两种格式，尤其是(const uint8_t*)
  Serial.println("send success");   
     if (wifi.releaseTCP()) {                                 //释放TCP连接
        Serial.print("release tcp ok\r\n");
        } 
     else {
        Serial.print("release tcp err\r\n");
        }
      postArray = NULL;                                       //清空数组，等待下次传输数据
  
  } else {
    Serial.print("create tcp err\r\n");
  }
  switch (keyA6[0].readEvent(140 - 30, 140 + 30)) {
    case SHORT_PRESS:
      audio.prevMusic();
      Serial.println("prev");   //短按
      break;
    case LONG_PRESS:
      audio.volumeUp();
      Serial.println("volUp");    //长按
      delay(500);
      break;
  }

  switch (keyA6[1].readEvent(80 - 30, 80 + 30)) {
    case SHORT_PRESS:
      audio.nextMusic();
      Serial.println("next");   //短按
      break;
    case LONG_PRESS:
      audio.volumeDown();
      Serial.println("volDown");    //长按
      delay(500);
      break;
  }

  switch (keyA6[2].readEvent(0, 30)) {
    case SHORT_PRESS:
      music_status = !music_status; //播放或暂停
      if (music_status) {
        audio.playMusic();
        Serial.println("play");
      }
      else {
        audio.pauseMusic();
        Serial.println("pause");
      };
      break;
  }

  if (millis() - time1 > 1000) {  
    time1 = millis();

    fileNum = audio.queryTFFile();        //查询当前播放歌曲的编号
    if (fileNum != fileNumCache) {      //发现播放歌曲更换
      fileNumCache = fileNum;
      nameCache = audio.queryName();    //查询当前播放歌曲名称
      totalTime = audio.queryTotalTime();     //查询当前播放歌曲总时间
    }
    playTime = audio.queryPlayTime();       //查询当前播放歌曲播放时间
    Serial.print("FileNum:");
    Serial.print(fileNum);
    Serial.print(", FileName:");
    Serial.print(nameCache);
    Serial.print(", TotleTime:");
    Serial.print(totalTime);
    Serial.print(", PlayTime:");
    Serial.println(playTime);
  }

  delay(10);
 
}
